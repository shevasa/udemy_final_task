import re

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import CommandStart

from keyboards.inline import checkout_callback, get_checkout_menu
from loader import dp, db, bot
from utils.misc.product_class import Product


@dp.message_handler(state='quantity_chosen')
@dp.message_handler(CommandStart(re.compile(r'\d{1,4}')))
async def show_product(message: types.Message, state: FSMContext):
    if await state.get_state():
        product_id = (await state.get_data()).get('product_id')
        try:
            quantity = int(message.text)
            if 15 <= quantity:
                await message.answer('‚ùóÔ∏è–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 15 –µ–¥–∏–Ω–∏—Ü‚ùóÔ∏è')
                quantity = (await state.get_data()).get('quantity')
        except ValueError:
            await message.answer('‚ùóÔ∏è–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ‚ùóÔ∏è')
            quantity = (await state.get_data()).get('quantity')
        await state.reset_state()
    else:
        product_id = int(message.get_args())
        quantity = 1
    chosen_product = await db.get_specific_product(product_id)
    caption = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {chosen_product.get('name')}\n\n" + f"–û–ø–∏—Å–∞–Ω–∏–µ: {chosen_product.get('description')}\n\n" + \
              f"–¶–µ–Ω–∞: {int(chosen_product.get('price')) * quantity}UAH\n\n" + f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}"
    await message.answer_photo(photo=chosen_product.get('photo_url'), caption=caption,
                               reply_markup=await get_checkout_menu(product_id=product_id, quantity=quantity))


@dp.callback_query_handler(checkout_callback.filter(action='choose_quantity'))
async def choose_quantity(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–û—Ç 1 –¥–æ 15)')
    await state.set_state("quantity_chosen")
    await state.update_data({
        "product_id": int(call.data.split(':')[2]),
        "quantity": int(call.data.split(':')[3])
    })


@dp.callback_query_handler(checkout_callback.filter(action='pay_by_bonus'))
async def pay_by_bonus(call: types.CallbackQuery):
    product_id = int(call.data.split(':')[2])
    quantity = int(call.data.split(':')[3])
    bonus = int(dict(await db.get_user_by_user_id(call.from_user.id)).get('money'))
    chosen_product_price = int(dict(await db.get_specific_product(product_id)).get('price'))
    if bonus >= chosen_product_price * quantity:
        await db.pay_by_bonus(chosen_product_price * quantity, call.from_user.id)
        await call.message.answer(
            ' üéÜ–í—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ —Ç–æ–≤–∞—Ä –±–æ–Ω—É—Å–∞–º–∏üéÜ\n\n'
            '–ù–∞—à–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å–≤—è–∂—É—Ç—å—Å—è —Å –≤–∞–º–∏ –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π –¥–æ—Å—Ç–∞–≤–∫–∏!'
            f'–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!\n–ù–∞ –≤–∞—à–µ–º –±–æ–Ω—É—Å–Ω–æ–º —Å—á–µ—Ç—É: {bonus - chosen_product_price * quantity}UAH'
            '\n\n–ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    else:
        await call.message.answer('‚ùå–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç—É‚ùå\n\n'
                                  f'–ù–∞ –≤–∞—à–µ–º –±–æ–Ω—É—Å–Ω–æ–º —Å—á–µ—Ç—É: {bonus}UAH\n'
                                  f'–°—Ç–æ–∏–º–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞: {chosen_product_price * quantity}UAH\n\n'
                                  '–ü–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: /start',
                                  reply_markup=await get_checkout_menu(product_id=product_id, only_card=True,
                                                                       quantity=quantity))


@dp.callback_query_handler(checkout_callback.filter(action='pay_by_card'))
async def send_invoice(call: types.CallbackQuery):
    product_id = int(call.data.split(':')[2])
    quantity = int(call.data.split(':')[3])
    chosen_product = await db.get_specific_product(product_id)
    prices = [
        types.LabeledPrice(label=f'{chosen_product.get("name")}', amount=chosen_product.get("price") * quantity * 100)]
    product_in_invoice = Product(title=f'{chosen_product.get("name")}', currency="UAH", prices=prices,
                                 description=chosen_product.get("description") + f"\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}",
                                 start_parameter='selling',
                                 photo_url=chosen_product.get('photo_url'),
                                 photo_height=512, photo_width=512)
    await bot.send_invoice(chat_id=call.message.chat.id, payload=f'{chosen_product.get("product_id")}000',
                           **product_in_invoice.generate_invoice())


@dp.pre_checkout_query_handler()
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query_id=pre_checkout_query.id, ok=True)
